from django.shortcuts import render
import random 
import string 



class CreditManagement(View):
    
    def post(self,request):
        response={"message":"","status":"failed","code":200,"callBack":"CreditManaagement"}
        try:
            headers = getHeaders(request)
            response.update({"message":"X-CSRF-TOKEN is missing in headers"})
            if 'X_CSRF_TOKEN' in  headers and headers['X_CSRF_TOKEN']!='':
                response.update({"message":"points are missing"})
                if "points" in request.POST and request.POST['points']!="":
                    response.update({"message":"remarks is missing"})
                    if "remarks" in request.POST and request.POST['remarks']!='':
                        response=self.createCreditManagementDef(headers['X-CSRF-TOKEN'],request.POST['points'],request.POST['remarks'],response)
        except Exception as e:
            response.update({"message":str(e),"status": "failed"})
        return HttpResponse(dumps(response))

    def createCreditManagementDef(self, userToken,points,response):
        usersCheck=verifyUserToken(userToken)
        # usersCheck=loads(dumps(DATABASE.users.find({"userToken":userToken},{'_id':0,'role':1,'userId':1}))) # check the users
        response.update({"message":'Invalid User'})
        if usersCheck:
            userId=usersCheck['userId']
            status=usersCheck['status']
            roleName=usersCheck['roleName']
            response.update({"message":"valid user"})
            if status=="active":
                userData = loads(dumps(db.users.find({"userId":userId,"status":"active"}, {'_id':0,'roleName':1,"userId":1,"userName":1,"email":1,"phoneNumber":1})))
                response.update({"message":"getting user successfully","userData":userData,"code":200,"status":"success"})


        return response

#**********************************************************************
def requestId():
    random = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(7)])
    return random 

class LoadCreit(View):
    def post(self,request):
        response={"message":"","status":"failed","code":200,"callBack":"LoadCredit"}
        try:
            headers = getHeaders(request)
            response.update({"message":"X-CSRF-TOKEN is missing in headers"})
            if 'X_CSRF_TOKEN' in  headers and headers['X_CSRF_TOKEN']!='':
                usersCheck=verifyUserToken(userToken)
                roleName=usersCheck['roleName']
                userId=usersCheck['userId']

                if roleName=="user":
                    response.update({"message":"Enter points"})
                    if "points" in request.POST and request.POST['points']!="":
                        response=self.loadCreditDef(request.POST['points'],response)

                
        except Exception as e:
            response.update({"message":str(e),"status":"failed"})
        return HttpResponse(dumps(response),content_type="application/json")

    def loadCreditDef(self,userId,points,response):
        db.creditRequest.insert({"requestID":requestId(),"pointesRequested":points,"userId":userId,"paymentMode":"credit","paymentModeOn":timestamp(),"isPaymentDone":"No"})
        response.update({"message":"requested sent successfully","status":"success","code":200})
        return response




            






















#********************************************************
    def get(self,request):
        response={"message":"","status":"failed","code":200}
        try:
            response.update({"message":"please pass userId"})
            if "userId" in request.GET and request.GET['userId']!="":
                response=getCreditManagementDef(request.GET['userId'],response)
        except Exception as e:
             response.update({"message":str(e),"status": "failed"})
        return HttpResponse(dumps(response))
#***********************************************************

def getCreditManagementDef(userId,response):
    adminCheck=loads(dumps(db.credits.find({"userId":userd,"role":"Admin"},{"_id":0})))
    if adminCheck:
        response.update({"message":"successfully get all users","status":"success","code":200,"callBack":"CreditManaagement"})
    else:
        response.update({"message":"Invalid Details","status":"failed","code":400,"callBack":"CreditManaagement"})
    return response




##############################################################
class Profile(View):
    def post(self,request):
        response={"message":"","status":"failed","code":400,"callBack":"Profile"}
        try:
            response.update({"message":"please pass name"})
            if "name" in request.POST and request.POST['name']!="":
                response.update({"message":"please pass description"})
                if "description" in request.POST and request.POST['description']!="":
                    response=createProfileDef(request.POST['name'],request.POST['description'],request.POST.get("expiry",None),request.POST('range',None),response)
        except Exception as e:
            response.update({"message":str(e),"status": "failed"})
        return HttpResponse(dumps(response))
#************************************
    def get(self,request):
        response={"message":"","status":"failed","code":400,"callBack":"Profile"}
        try:
            response.update(getProfileDetailsDef(request.GET
            .get("profileId",None),response))
        except Exception as e:
            response.update({"message":str(e)})
        return HttpResponse(dumps(response))
#*****************************************************
    def put(self,request):
        response={"message":"","status":"failed","code":400,"callBack":"Profile"}
        try:
            response.update({"message":"please pass profileId"})
            if "profileId" in request.PUT and request.PUT['profileId']!="":
                response=updateBatchInfoDef(request.PUT['profileId'], response)
        except Exception as e:
            response.update({"message":str(e)})
        return HttpResponse(dumps(response))
#**********************************************************
    def delete(self,request):
        response={"message":"","status":"failed","code":400,"callBack":"Profile"}
        try:
            response.update({"message":"please pass profileId"})
            if "profileId" in request.DELETE and request.DELETE['profileId']!="":
                response=disableBatchInfoDef(request.DELETE['profileId'],response)
        except Exception as e:
            response.update({"message":str(e)})
        return HttpResponse(dumps(response))



def createProfileDef(name,description,expiry,range,response):
    db.createProfile.insert({"name":name,"description":description,"expiry":expiry,"range":range})
    response.update({"message":"Profile created successfully","status":"success","code":200,"callBack":"Profile"})
    return response

def getProfileDetailsDef(profileId,response):
    profileDetails=loads(dumps(db.createProfile.find({"userId":profileId},{"_id":0})))
    response.update({"message":"Invalid Details","status":"failed","code":400,"callBack":"Profile"})
    if profileDetails:
        response.update({"message":"successfully get profile details","status":"success","code":200,"callBack":"Profile"})
    return response

def disableBatchInfoDef(profileId,response):
    
    

    

